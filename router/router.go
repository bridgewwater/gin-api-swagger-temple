package router

import (
	_ "git.sinlov.cn/bridgewwater/temp-gin-api-self/docs" // docs is generated by Swag CLI, you have to import it. use [ swag init ]
	"git.sinlov.cn/bridgewwater/temp-gin-api-self/handler/ssc"
	"git.sinlov.cn/bridgewwater/temp-gin-api-self/router/middleware"
	"github.com/gin-gonic/gin"
	"github.com/spf13/viper"
	"github.com/swaggo/gin-swagger"
	"github.com/swaggo/gin-swagger/swaggerFiles"
	"net/http"
)

// Load loads the middlewares, routes, handlers.
func Load(g *gin.Engine, mw ...gin.HandlerFunc) *gin.Engine {
	// Middlewares.
	g.Use(gin.Recovery())
	g.Use(middleware.NoCache)
	g.Use(middleware.Options)
	g.Use(middleware.Secure)
	g.Use(mw...)
	// 404 Handler.
	g.NoRoute(func(c *gin.Context) {
		c.String(http.StatusNotFound, "The incorrect API route.")
	})

	// swagger api docs
	var env = viper.GetString("runmode")
	var envName = ""
	if env == "debug" || env == "test" {
		envName = "NAME_OF_ENV_VARIABLE"
	}

	if viper.GetBool("swagger_security") {
		// just use swagger as swagger_user
		swaggerGroup := g.Group("/swagger", gin.BasicAuth(gin.Accounts{
			"admin": viper.GetString("swagger_user.admin"),
			"user":  viper.GetString("swagger_user.user"),
		}))
		//noinspection GoTypesCompatibility
		swaggerGroup.GET("/*any", ginSwagger.DisablingWrapHandler(swaggerFiles.Handler, envName))
	} else {
		//noinspection GoTypesCompatibility
		g.GET("/swagger/*any", ginSwagger.DisablingWrapHandler(swaggerFiles.Handler, envName))
	}

	// api base path at config base_path
	basePath := viper.GetString("base_path")

	// The health check handlers
	sscRouteGroup := g.Group(basePath + "/ssc")
	{
		sscRouteGroup.GET("/health", ssc.HealthCheck)
		sscRouteGroup.GET("/disk", ssc.DiskCheck)
		sscRouteGroup.GET("/cpu", ssc.CPUCheck)
		sscRouteGroup.GET("/ram", ssc.RAMCheck)
	}

	return g
}
