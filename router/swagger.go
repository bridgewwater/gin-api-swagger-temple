package router

import (
	"fmt"
	"git.sinlov.cn/bridgewwater/temp-gin-api-self/config"
	"git.sinlov.cn/bridgewwater/temp-gin-api-self/docs"
	_ "git.sinlov.cn/bridgewwater/temp-gin-api-self/docs" // docs is generated by Swag CLI, you have to import it. use [ swag init ]
	"github.com/gin-gonic/gin"
	"github.com/lexkong/log"
	"github.com/spf13/viper"
	ginSwagger "github.com/swaggo/gin-swagger"
	"github.com/swaggo/gin-swagger/swaggerFiles"
)

// load at config.yml
//	swagger:                            # swagger not show at release
//		root: /swagger                    # swagger root
//		index: /swagger/index.html        # swagger index
//		title: temp-gin-api-self          # swagger title
//		description: This is a sample server celler server. # swagger description
//		version: 1.0                      # swagger version
//		host: 127.0.0.1:39000             # swagger host:port
//		security: false                    # swagger security true or false
//		user:                             # swagger user setting of BasicAuth
//			admin: 36116f7c73bc9acb2a7a26   # admin:pwd
//			user: e2236a11aceac4de          # user:pwd
func swaggerInfo(baseURL string) {
	docs.SwaggerInfo.Title = viper.GetString("swagger.title")
	docs.SwaggerInfo.Description = viper.GetString("swagger.description")
	docs.SwaggerInfo.Version = viper.GetString("swagger.version")
	docs.SwaggerInfo.Host = viper.GetString("swagger.host")
	docs.SwaggerInfo.BasePath = viper.GetString("base_path")
	log.Infof("In debug mode,you can use swagger")
	log.Infof("swagger.link at: %v%v", baseURL, viper.GetString("swagger.index"))
	log.Infof("swagger.security status: %v", viper.GetBool("swagger.security"))
}

func swaggerGroup(envName string, g *gin.Engine) {
	envName = "NAME_OF_ENV_VARIABLE"
	log.Infof("envName %v", envName)
	// https://github.com/swaggo/swag/issues/194#issuecomment-475853710
	configSwagger := &ginSwagger.Config{
		URL: fmt.Sprintf("%v%v", config.BaseURL(), "/swagger/doc.json"), //The url pointing to API definition
	}
	swaggerRoot := viper.GetString("swagger.root")
	if viper.GetBool("swagger.security") {
		// just use swagger as swagger_user
		swaggerGroup := g.Group(swaggerRoot, gin.BasicAuth(gin.Accounts{
			"admin": viper.GetString("swagger.user.admin"),
			"user":  viper.GetString("swagger.user.user"),
		}))
		//noinspection GoTypesCompatibility
		swaggerGroup.GET("/*any", ginSwagger.CustomWrapHandler(configSwagger, swaggerFiles.Handler))
	} else {
		//noinspection GoTypesCompatibility
		//g.GET(swaggerRoot+"/*any", ginSwagger.DisablingWrapHandler(swaggerFiles.Handler, envName))
		g.GET(swaggerRoot+"/*any", ginSwagger.CustomWrapHandler(configSwagger, swaggerFiles.Handler))
	}
}
