package router

import (
	"fmt"

	"github.com/bar-counter/slog"
	"github.com/bridgewwater/gin-api-swagger-temple/config"
	genDocs "github.com/bridgewwater/gin-api-swagger-temple/docs" // docs generated by swag CLI, you have to import it. use [ swag init ]
	"github.com/gin-gonic/gin"
	"github.com/spf13/viper"
	swaggerFiles "github.com/swaggo/files"
	ginSwagger "github.com/swaggo/gin-swagger"
)

// load at config.yml
//
//	swagger:                            # swagger not show at release
//		root: /swagger                    # swagger root
//		index: /swagger/index.html        # swagger index
//		title: gin-api-swagger-temple          # swagger title
//		description: This is a sample server cell server. # swagger description
//		version: 1.0                      # swagger version
//		host: 127.0.0.1:39000             # swagger host:port
//		security: false                    # swagger security true or false
//		user:                             # swagger user setting of BasicAuth
//			admin: 36116f7c73bc9acb2a7a26   # admin:pwd
//			user: e2236a11aceac4de          # user:pwd
func swaggerInfo(baseURL string) {
	genDocs.SwaggerInfo.Title = viper.GetString("swagger.title")
	genDocs.SwaggerInfo.Description = viper.GetString("swagger.description")
	genDocs.SwaggerInfo.Version = viper.GetString("swagger.version")
	genDocs.SwaggerInfo.Host = viper.GetString("swagger.host")
	genDocs.SwaggerInfo.BasePath = viper.GetString("base_path")
	genDocs.SwaggerInfo.Schemes = []string{"http", "https"}
	slog.Info("=== In debug mode,you can use swagger ===")
	slog.Infof("baseURL at: %v", baseURL)
	slog.Infof("host: %v", viper.GetString("swagger.host"))
	slog.Infof("swagger.security status: %v", viper.GetBool("swagger.security"))
	slog.Infof("api base_path: %v", viper.GetString("base_path"))
}

func swaggerGroup(baseURL, envName string, g *gin.Engine) {
	envName = "NAME_OF_ENV_VARIABLE"
	slog.Infof("envName %v", envName)
	// https://github.com/swaggo/swag/issues/194#issuecomment-475853710
	swaggerRoot := viper.GetString("swagger.root")
	swaggerUiRoot := viper.GetString("swagger.ui_root")
	if swaggerRoot == "" {
		swaggerRoot = "/swagger"
	}
	configSwagger := &ginSwagger.Config{
		URL: fmt.Sprintf("%s%s%s", config.BaseURL(), swaggerRoot, "/doc.json"), //The url pointing to API definition
		//InstanceName: "doc",
	}
	slog.Debugf("configSwagger.URL %v", configSwagger.URL)

	slog.Infof("== swagger.link at: %v%v", baseURL, viper.GetString("swagger.index"))
	if viper.GetBool("swagger.security") {
		// just use swagger as swagger_user
		swaggerGroup := g.Group(swaggerRoot, gin.BasicAuth(gin.Accounts{
			"admin": viper.GetString("swagger.user.admin"),
			"user":  viper.GetString("swagger.user.user"),
		}))
		{
			swaggerGroup.StaticFile("/doc.json", "./docs/swagger.json")
		}
		//noinspection GoTypesCompatibility
		swaggerGroup.GET(swaggerUiRoot+"/*any", ginSwagger.CustomWrapHandler(configSwagger, swaggerFiles.Handler))
	} else {
		//g.StaticFile(swaggerRoot+"/doc.json", "./docs/swagger.json")
		swaggerGroup := g.Group(swaggerRoot)
		{
			swaggerGroup.StaticFile("/doc.json", "./docs/swagger.json")
		}

		//noinspection GoTypesCompatibility
		//g.GET(swaggerRoot+"/*any", ginSwagger.DisablingWrapHandler(swaggerFiles.Handler, envName))
		swaggerGroup.GET(swaggerUiRoot+"/*any", ginSwagger.CustomWrapHandler(configSwagger, swaggerFiles.Handler))
	}
}
